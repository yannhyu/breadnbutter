mkvirtualenv -p /usr/bin/python3.5 lwdjango

psql -U monty -d testdb -h 127.0.0.1 -W
psql -U postgres -d testdb -h 127.0.0.1 -W
+++++++++++++++++++++++++++++++++++++++++++

Switch to the postgres user:<br>
sudo su postgres<br><br>
Execute the postgres createdb command:<br>
createdb <dbname> --encoding='utf-8' --locale=en_US.utf8 --template=template0;<br><br>
List the databases from psql:<br> 
psql<br>
\l<br><br>
Quit back to the previous user:<br>
exit

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


(djrestfw) C:\Users\yann.yu\Documents\tips\how2medlytix\ISO_project\creative_workshop_06_20_2017\lwdj\build_rest_api>
++++++++++++++++++++++++++++++++++++++++++++++++++++

django-admin.py startproject scrum
django-admin startproject scrum

cd scrum

python manage.py startapp board

++++++++++++++++++++++++++++++++++++++++++++++

 C:\>cd C:\Program Files\PostgreSQL\9.5\bin

++++++++++++++++++++++++++++++++++++++++++++++ 

hostname $ pip install psycopg2
hostname $ createdb -E UTF-8 scrum

C:\"Program Files"\PostgreSQL\9.5\bin\createdb -E UTF-8 scrum

++++++++++++++++++++++++++++++++++++++++++++++

python manage.py makemigrations board

python manage.py migrate

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
psycopg2.OperationalError: fe_sendauth: no password supplied

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

python manage.py createsuperuser

create the
user with the username 
   demo 
and the password 
   test.
hostname $ python manage.py createsuperuser
Username (leave blank to use 'username'): demo
Email address: demo@example.com
Password:
Password (again):
Superuser created successfully.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

It is redundant to specify `get_links` on SerializerMethodField 'links' in serializer 'SprintSerializer', because it is the same as the default method name. Remove the `method_name` argument.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

It is redundant to specify `get_status_display` on SerializerMethodField 'status_display' in serializer 'TaskSerializer', because it is the same as the default method name. Remove the `method_name` argument.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

filters

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Since there is only one task with the name “First Task,” searching for “foo” via 

  http://localhost:8000/api/tasks/?search=foo 

will yield no results, while seaching for “first” with
  http://localhost:8000/api/tasks/?search=first 
will.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

This will make
  http://localhost:8000/api/tasks/?backlog=True 

return all tasks that aren’t assigned to a sprint.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
TemplateDoesNotExist at /api/tasks/
django_filters/rest_framework/form.html

may need to add 'django_filters' to INSTALLED_APPS.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

With this change in place, the tasks assigned to the one and only demo user can now be
retrived using
  http://localhost:8000/api/tasks/?assigned=demo

rather than
  http://localhost:8000/api/tasks/?assigned=1.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

   
will show all sprints that ended
after July 1, 2014, and 
   http://localhost:8000/api/sprints/?end_max=2014-08-01 

will show
all sprints that ended before August 1, 2014. These can be combined to limit sprints to
a given date range.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Since the views for sprints and tasks support filtering, you can create links to link a
sprint to its related tasks and users to their tasks by modifying board/serializers.py.

With our filters in place, and to continue the benefits of using this browsable interface,
let’s build out some validations to secure the state of our data.

   http://localhost:8000/api/tasks/?sprint=1
   http://localhost:8000/api/tasks/?assigned=demo2

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
To look at how the client’s request of that markup is translated back into
creating a model instance. For a typical Django view, this would be handled by a Form
or ModelForm . In django-rest-framework , this is handled by the serializer.

One thing the API should prevent is creating sprints that have happened prior to the
current date and time. To handle this, the SprintSerializer needs to check the value
of the end date submitted by the client. Each serializer field has a validate_<field>
hook that is called to perform additional validations on the field. Again, this parallels
the clean_<field> in Django’s forms. This should be added to SprintSerializer in
board/serializers.py.   

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

To see this in action, we can attempt to create a historical sprint on http://localhost:8000/
api/sprints/. You should now get a 400 BAD REQUEST response.
HTTP 400 BAD REQUEST
Vary: Accept
Content-Type: application/json
Allow: GET, POST, HEAD, OPTIONS
{
"end": [
"End date cannot be in the past."
]
}

+++++++++++++++++++++++++++++++++++++++++++++++++

TypeError at /api/sprints/

validate_end() missing 1 required positional argument: 'source'
Note from the Author or Editor:
The original code for this section was written for Django Rest Framework version 2.4.X. After publication, version 3.0 was released with incompatible changes for the serializers. If you see this error, to make the code compatible with version 3.0.X you need to change the SprintSerializer.validate_end:

    class SprintSerializer(serializers.ModelSerializer):
        ...
        def validate_end(self, value):
            new = self.instance is None
            changed = self.instance and self.instance.end != value
            if (new or changed) and (value < date.today()):
                msg = _('End date cannot be in the past.')
                raise serializers.ValidationError(msg)
            return value


and TaskSerializer.validate_sprint:

class TaskSerializer(serializers.ModelSerializer):
    ...
    def validate_sprint(self, value):
        if self.instance and self.instance.pk:
            if value != self.instance.sprint:
                if self.instance.status == Task.STATUS_DONE:
                    msg = _('Cannot change the sprint of a completed task.')
                    raise serializers.ValidationError(msg)
                if value and value.end < date.today():
                    msg = _('Cannot assign tasks to past sprints.')
                    raise serializers.ValidationError(msg)
        else:
            if value and value.end < date.today():
                msg = _('Cannot add tasks to past sprints.')
                raise serializers.ValidationError(msg)
        return value

See http://www.django-rest-framework.org/topics/3.0-announcement/#serializers and updates
to the example project https://github.com/lightweightdjango/examples/commit/bbf88e20765ede522cd2026e08e2a24c7da33b89 for more details.